// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  users      User[]      @relation("StoreToUser")
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  Attributes Attribute[] @relation("StoreToAttribute")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model User {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation("StoreToUser", fields: [storeId], references: [id])
  role    String

  @@index([storeId])
}

// we will separate the users from the buyers
model ClientUser {
  id          String @id @default(uuid())
  name        String
  age         Int
  email       String
  phoneNumber Int
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String // Foreign Key to Category
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String      @default("")
  price       Decimal
  variants    Variant[]   @relation("ProductToVariant")
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  images      Image[] // Relation to Image model
  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Variant {
  id              String             @id @default(uuid())
  productId       String // Foreign Key to Product
  product         Product            @relation("ProductToVariant", fields: [productId], references: [id])
  additionalPrice Decimal            @default(0.0)
  stockQuantity   Int                @default(0)
  attributes      VariantAttribute[] @relation("VariantToVariantAttribute")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([productId])
}

model VariantAttribute {
  id               String         @id @default(uuid())
  variantId        String // Foreign Key to Variant
  variant          Variant        @relation("VariantToVariantAttribute", fields: [variantId], references: [id])
  attributeValueId String // Foreign Key to AttributeValue
  attributeValue   AttributeValue @relation("AttributeValueToVariantAttribute", fields: [attributeValueId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([variantId])
  @@index([attributeValueId])
}

model AttributeValue {
  id          String             @id @default(uuid())
  attributeId String // Foreign Key to Attribute
  attribute   Attribute          @relation(fields: [attributeId], references: [id])
  name        String
  value       String
  variants    VariantAttribute[] @relation("AttributeValueToVariantAttribute")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([attributeId])
}

model Attribute {
  id        String           @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store            @relation("StoreToAttribute", fields: [storeId], references: [id])
  name      String
  values    AttributeValue[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([storeId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  clientId   String      @default("")
  name       String      @default("")
  phone      String      @default("")
  email      String      @unique @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus @default(PENDING)

  @@index([storeId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Intermediary for a many-to-many relationship-- size should be added here the ordered item's color too
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  size      String  @default("")
  color     String  @default("")
  quantity  Decimal @default(1)

  @@index([orderId])
  @@index([productId])
}
